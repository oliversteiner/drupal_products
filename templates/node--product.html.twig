{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
{% set classes = [
  'node',
  'node--type-' ~ node.bundle|clean_class,
  node.isPromoted() ? 'node--promoted',
  node.isSticky() ? 'node--sticky',
  not node.isPublished() ? 'node--unpublished',
  view_mode ? 'node--view-mode-' ~ view_mode|clean_class,
] %}
{{ attach_library('classy/node') }}
<article{{ attributes.addClass(classes) }}>


  {{ title_prefix }}
  {% if label and not page %}
    <h2{{ title_attributes }}>
      <a href="{{ url }}" rel="bookmark">{{ label }}</a>
    </h2>
  {% endif %}
  {{ title_suffix }}

  {% if display_submitted %}
    <footer class="node__meta">
      {{ author_picture }}
      <div{{ author_attributes.addClass('node__submitted') }}>
        {% trans %}Submitted by {{ author_name }} on {{ date }}{% endtrans %}
        {{ metadata }}
      </div>
    </footer>
  {% endif %}

  <div{{ content_attributes.addClass('node__content') }}>

    {{ dd(product) }}
    {# category #}
    <div class="product-category"> {{ product.category }} </div>
    <div class="product-cover"> {{ product.cover }} </div>

    {# name #}
    <div class="product-name"><span class="product-label sr-only">Titel:</span> {{ product.name }} </div>

    {# description #}
    <div class="product-description"><span class="product-label sr-only">Beschreibung:</span> {{ product.description }}
    </div>

    {# artist #}
    <div class="product-artist"><span class="product-label sr-only">Interpret:</span> {{ product.artist }} </div>

    {# author #}
    <div class="product-author"><span class="product-label sr-only">Autor:</span> {{ product.author }} </div>

    {# copyright #}
    <div class="product-copyright"><span class="product-label sr-only">Copyright:</span> {{ product.copyright }} </div>

    {# producer #}
    <div class="product-producer"><span class="product-label sr-only">Produzent:</span>{{ product.producer }} </div>

    {# price #}
    <div class="product-price"><span class="product-label sr-only">Preis CD:</span> {{ product.price }} </div>

    {# download #}
    {% if product.has_download %}
      {# download-price #}
      <div class="product-download-price"><span
          class="product-label sr-only">Preis MP3:</span> {{ product.download_price }}
      </div>
    {% endif %}

    {% if not product.available %}

      {# available #}
      <div class="product-not-available">Zur Zeit nicht verfügbar.</div>
    {% endif %}

    {# tracks  ==================================  #}
    <div class="product-tracks">

      <ul class="product-track-list" aria-label="Album Track Liste">
        {% for track in product.tracks %}

          <li class="product-track-list-item">

            {# ===== Track List Item General #}
            <div class="product-track-list-item-general">
              {# number #}
              <span class="product-track-list-item-number">{{ track.number }}</span>

              {# name #}
              <span class="product-track-list-item-name">{{ track.name }}</span>

              {# duration #}
              <span class="product-track-list-item-duration">{{ track.duration }}</span>

              {# preview #}
              <span class="product-track-list-item-preview">{{ track.preview }}</span>

              {# audio #}
              <span class="product-track-list-item-audio">{{ track.audio }}</span>

              {# preview_file #}
              {% if track.has_preview %}
                <span class="product-track-list-item-preview">

                  <a href="{{ track.preview_file.link }}"> <i
                      class="fas fa-volume-up"></i> {{ track.preview.file_name }}</a>
                </span>

              {% endif %}

            </div>

            {# ===== Track List Item Preview #}
            {% if track.has_preview %}

            <div class="product-track-list-item-preview-player">
              <audio controls="controls">
                <source src="{{ track.preview.media_link }}" type="{{ track.preview.mime_type }}">
              </audio>
            </div>
            {% endif %}

            {# ===== Track List Item Download only #}
            {% if track.download_only %}
              <div class="product-track-list-item-download-only">
                Nur als mp3 erhältlich.
              </div>
            {% endif %}

            {# ===== Track List Item Info #}
            <div class="product-track-list-item-info">

              {# artist #}
              <span class="product-track-list-item-artist">{{ track.artist }}</span>

              {# author #}
              <span class="product-track-list-item-author">{{ track.author }}</span>

              {# copyright #}
              <span class="product-track-list-item-copyright">{{ track.copyright }}</span>
            </div>

          </li>

        {% endfor %}
      </ul>
    </div>
    {# end tracks    ==================================   #}


</article>
